var EventEmitter, StubCameraControl, expect, fs, rewire, sinon;

expect = require("chai").expect;

sinon = require("sinon");

rewire = require("rewire");

fs = require("fs-extra");

StubCameraControl = rewire("../lib/stub_camera_control");

EventEmitter = require("events").EventEmitter;

describe("StubCameraControl", function() {
  describe("initialization events", function() {
    describe("constructor", function() {
      return it("returns instance of MCC", function() {
        var mcc;
        mcc = new StubCameraControl();
        return expect(mcc).to.be["instanceof"](StubCameraControl);
      });
    });
    return describe("#init", function() {
      return it("returns EventEmitter", function() {
        var ee;
        ee = new StubCameraControl().init();
        return expect(ee).to.be["instanceof"](EventEmitter);
      });
    });
  });
  return describe("events", (function(_this) {
    return function() {
      var mockFs;
      mockFs = null;
      beforeEach(function() {
        mockFs = sinon.mock(fs);
        mockFs.expects("copySync").atLeast(1).returns(true);
        return StubCameraControl.__set__("fs", fs);
      });
      afterEach(function() {
        return mockFs.restore();
      });
      return describe("on 'snap'", function() {
        var subject;
        subject = new StubCameraControl().init();
        it("emits 'camera_begin_snap'", (function(_this) {
          return function() {
            var spy;
            spy = sinon.spy();
            subject.on("camera_begin_snap", spy);
            subject.emit("snap");
            return expect(spy.called).to.be["true"];
          };
        })(this));
        it("emits 'camera_snapped' after gphoto sends confirmation", function() {
          var spy;
          spy = sinon.spy();
          subject.on("camera_snapped", spy);
          subject.emit("snap");
          return expect(spy.called).to.be["true"];
        });
        return describe("when simulating gphoto save", function() {
          it("moves a fixture file to the public directory", function() {
            mockFs.expects("copySync").withArgs("test/fixtures/test_photo.jpg", "public/temp/test_photo.jpg").atLeast(1);
            subject.emit("snap");
            return mockFs.verify();
          });
          return it("emits 'photo_saved' with save metadata", function() {
            var cwdPath, fname, spy, webUrl;
            spy = sinon.spy();
            subject.on("photo_saved", spy);
            subject.emit("snap");
            expect(spy.called).to.be["true"];
            fname = "test_photo.jpg";
            cwdPath = "public/temp/" + fname;
            webUrl = "/temp/" + fname;
            return expect(spy.calledWith(fname, cwdPath, webUrl)).to.be["true"];
          });
        });
      });
    };
  })(this));
});

// ---
// generated by coffee-script 1.9.2
